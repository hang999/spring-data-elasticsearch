/*
 * Copyright 2018 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package org.springframework.data.elasticsearch.core;

import static org.apache.commons.lang.RandomStringUtils.*;
import static org.assertj.core.api.Assertions.*;

import reactor.core.publisher.Mono;
import reactor.test.StepVerifier;

import java.net.ConnectException;
import java.util.Collections;
import java.util.List;
import java.util.Map;

import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.springframework.dao.DataAccessResourceFailureException;
import org.springframework.data.elasticsearch.TestUtils;
import org.springframework.data.elasticsearch.core.query.Criteria;
import org.springframework.data.elasticsearch.core.query.CriteriaQuery;
import org.springframework.data.elasticsearch.core.query.IndexQuery;
import org.springframework.data.elasticsearch.core.query.IndexQueryBuilder;
import org.springframework.data.elasticsearch.entities.SampleEntity;
import org.springframework.test.context.ContextConfiguration;
import org.springframework.test.context.junit4.SpringRunner;

/**
 * @author Christoph Strobl
 * @currentRead Golden Fool - Robin Hobb
 */
@RunWith(SpringRunner.class)
@ContextConfiguration("classpath:infrastructure.xml")
public class ReactiveElasticsearchTemplateTests {

	static final String DEFAULT_INDEX = "test-index-sample";
	static final String ALTERNATE_INDEX = "reactive-template-tests-alternate-index";

	private ElasticsearchRestTemplate restTemplate;
	private ReactiveElasticsearchTemplate template;

	@Before
	public void setUp() {

		TestUtils.deleteIndex(DEFAULT_INDEX, ALTERNATE_INDEX);

		restTemplate = new ElasticsearchRestTemplate(TestUtils.restHighLevelClient());
		restTemplate.createIndex(SampleEntity.class);
		restTemplate.putMapping(SampleEntity.class);
		restTemplate.refresh(SampleEntity.class);

		template = new ReactiveElasticsearchTemplate(TestUtils.reactiveClient());
	}

	@Test // DATAES-504
	public void executeShouldProvideResource() {

		Mono.from(template.execute(client -> client.ping())) //
				.as(StepVerifier::create) //
				.expectNext(true) //
				.verifyComplete();
	}

	@Test // DATAES-504
	public void executeShouldConvertExceptions() {

		Mono.from(template.execute(client -> {
			throw new RuntimeException(new ConnectException("we're doomed"));
		})) //
				.as(StepVerifier::create) //
				.expectError(DataAccessResourceFailureException.class) //
				.verify();
	}

	@Test // DATAES-504
	public void indexWithIdShouldWork() {

		String documentId = randomNumeric(5);
		SampleEntity sampleEntity = SampleEntity.builder().id(documentId).message("foo bar")
				.version(System.currentTimeMillis()).build();

		template.index(sampleEntity)//
				.as(StepVerifier::create)//
				.expectNextCount(1)//
				.verifyComplete();

		restTemplate.refresh(SampleEntity.class);

		List<SampleEntity> result = restTemplate
				.queryForList(new CriteriaQuery(Criteria.where("message").is(sampleEntity.getMessage())), SampleEntity.class);
		assertThat(result).hasSize(1);
	}

	@Test // DATAES-504
	public void indexWithAutogeneratedIdShouldUpdateEntityId() {

		SampleEntity sampleEntity = SampleEntity.builder().message("wohoo").build();

		template.index(sampleEntity) //
				.as(StepVerifier::create) //
				.consumeNextWith(it -> {

					assertThat(it.getId()).isNotNull();

					restTemplate.refresh(SampleEntity.class);
					assertThat(TestUtils.documentWithId(it.getId()).existsIn(DEFAULT_INDEX)).isTrue();
				}) //
				.verifyComplete();
	}

	@Test // DATAES-504
	public void indexWithExplicitIndexNameShouldOverwriteMetadata() {

		String documentId = randomNumeric(5);
		SampleEntity sampleEntity = SampleEntity.builder().id(documentId).message("in another index").build();

		template.index(sampleEntity, ALTERNATE_INDEX).as(StepVerifier::create)//
				.expectNextCount(1)//
				.verifyComplete();

		restTemplate.refresh(DEFAULT_INDEX);
		restTemplate.refresh(ALTERNATE_INDEX);

		assertThat(TestUtils.documentWithId(documentId).existsIn(DEFAULT_INDEX)).isFalse();
		assertThat(TestUtils.documentWithId(documentId).existsIn(ALTERNATE_INDEX)).isTrue();
	}

	@Test // DATAES-504
	public void indexShouldAcceptPlainMapStructureAsSource() {

		Map<String, Object> map = Collections.singletonMap("foo", "bar");

		template.index(map, ALTERNATE_INDEX, "singleton-map") //
				.as(StepVerifier::create) //
				.expectNextCount(1) //
				.verifyComplete();
	}

	@Test(expected = IllegalArgumentException.class) // DATAES-504
	public void indexShouldErrorOnNullEntity() {
		template.index(null);
	}

	@Test // DATAES-504
	public void findByIdShouldReturnEntity() {

		String documentId = randomNumeric(5);
		SampleEntity sampleEntity = SampleEntity.builder().id(documentId).message("some message")
				.version(System.currentTimeMillis()).build();

		IndexQuery indexQuery = getIndexQuery(sampleEntity);
		restTemplate.index(indexQuery);
		restTemplate.refresh(SampleEntity.class);

		template.findById(documentId, SampleEntity.class) //
				.as(StepVerifier::create) //
				.expectNext(sampleEntity) //
				.verifyComplete();
	}

	@Test // DATAES-504
	public void findByIdShouldCompleteWhenNotingFound() {

		String documentId = randomNumeric(5);
		SampleEntity sampleEntity = SampleEntity.builder().id(documentId).message("some message")
				.version(System.currentTimeMillis()).build();

		IndexQuery indexQuery = getIndexQuery(sampleEntity);
		restTemplate.index(indexQuery);
		restTemplate.refresh(SampleEntity.class);

		template.findById("foo", SampleEntity.class) //
				.as(StepVerifier::create) //
				.verifyComplete();
	}

	@Test(expected = IllegalArgumentException.class) // DATAES-504
	public void findByIdShouldErrorForNullId() {
		template.findById(null, SampleEntity.class);
	}

	@Test // DATAES-504
	public void findByIdWithExplicitIndexNameShouldOverwriteMetadata() {

		String documentId = randomNumeric(5);
		SampleEntity sampleEntity = SampleEntity.builder().id(documentId).message("some message")
				.version(System.currentTimeMillis()).build();

		IndexQuery indexQuery = getIndexQuery(sampleEntity);
		indexQuery.setIndexName(ALTERNATE_INDEX);

		restTemplate.index(indexQuery);
		restTemplate.refresh(SampleEntity.class);

		restTemplate.refresh(DEFAULT_INDEX);
		restTemplate.refresh(ALTERNATE_INDEX);

		template.findById(documentId, SampleEntity.class) //
				.as(StepVerifier::create) //
				.verifyComplete();

		template.findById(documentId, SampleEntity.class, ALTERNATE_INDEX) //
				.as(StepVerifier::create)//
				.expectNextCount(1) //
				.verifyComplete();
	}

	@Test // DATAES-504
	public void findShouldApplyCriteria() {

		String documentId = randomNumeric(5);
		SampleEntity sampleEntity = SampleEntity.builder().id(documentId).message("some message")
				.version(System.currentTimeMillis()).build();

		IndexQuery indexQuery = getIndexQuery(sampleEntity);
		restTemplate.index(indexQuery);
		restTemplate.refresh(SampleEntity.class);

		CriteriaQuery criteriaQuery = new CriteriaQuery(Criteria.where("message").is("some message"));

		template.query(criteriaQuery, SampleEntity.class) //
				.as(StepVerifier::create) //
				.expectNext(sampleEntity) //
				.verifyComplete();
	}

	@Test // DATAES-504
	public void findShouldReturnEmptyFluxIfNothingFound() {

		String documentId = randomNumeric(5);
		SampleEntity sampleEntity = SampleEntity.builder().id(documentId).message("some message")
				.version(System.currentTimeMillis()).build();

		IndexQuery indexQuery = getIndexQuery(sampleEntity);
		restTemplate.index(indexQuery);
		restTemplate.refresh(SampleEntity.class);

		CriteriaQuery criteriaQuery = new CriteriaQuery(Criteria.where("message").is("foo"));

		template.query(criteriaQuery, SampleEntity.class) //
				.as(StepVerifier::create) //
				.verifyComplete();
	}

	// --> JUST some helpers

	private IndexQuery getIndexQuery(SampleEntity sampleEntity) {
		return new IndexQueryBuilder().withId(sampleEntity.getId()).withObject(sampleEntity)
				.withVersion(sampleEntity.getVersion()).build();
	}
}
